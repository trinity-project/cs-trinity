/*
Author: Trinity Core Team

MIT License

Copyright (c) 2018 Trinity

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

using Neo;
using Neo.Wallets;
using Neo.SmartContract;

using Trinity.Wallets.Templates.Definitions;


namespace Trinity.BlockChain.Interface
{
    public interface IBlockChain
    {
        bool CreateFundingTx(out FundingTx fundingTx);
        /// <summary>
        /// For Funding Transaction.
        /// Create the Funding Transaction content which is used to create channel.
        /// </summary>
        /// <param name="fundingTx"> Out Parameter. Funding Transaction Content. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateBRTX(out BreachRemedyTx breachRemedyTx, string txId);
        /// <summary>
        /// For RSMC Transaction.
        /// Create the Breach Remedy transaction content based on the txId of the Commitment transaction.
        /// </summary>
        /// <param name="breachRemedyTx"> Out Parameter. Breach Remedy Transaction content </param>
        /// <param name="txId"> In Parameter. Transaction ID of the Commitment Transaction
        ///                                   which is generated by calling CreateCTX.
        /// </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateCTX(out CommitmentTx commitmentTx);
        /// <summary>
        /// For RSMC Transaction.
        /// Create the Commitment Transaction content.
        /// </summary>
        /// <param name="commitmentTx"> Out Parameter. Commitment Transaction Content </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateRDTX(out RevocableDeliveryTx revocableDeliveryTx, string txId);
        /// <summary>
        /// For Both Funding and RSMC Transaction.
        /// Create the Revocable Transaction content based on txId of the Commitment Transaction.
        /// </summary>
        /// <param name="revocableDeliveryTx"> Out Parameter. Revocable Transaction content. </param>
        /// <param name="txId"> In Parameter. Transaction ID of Commentment content.  </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateHEDTX(out HtlcExecutionDeliveryTx HEDTX, string HtlcPay, string txId=null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Execution Delivery Transaction Content.
        /// </summary>
        /// <param name="HEDTX"> Out Parameter. HTLC Execution Delivery Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateHERDTX(out HtlcExecutionRevocableDeliveryTx HERDTX, string HtlcPay, string txId = null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Execution Revocable Delivery Transaction Content.
        /// </summary>
        /// <param name="HERDTX"> Out Parameter. HTLC Execution Revocable Delivery Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <param name="txId"> In Parameter. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateHETX(out HtlcExecutionTx HETX, string HtlcPay, string txId = null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Execution Transaction Content.
        /// </summary>
        /// <param name="HETX"> Out Parameter. HTLC Execution Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateHTDTX(out HtlcTimeoutDeliveryTx HTDTX, string HtlcPay, string txId=null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Timeout Delivery Transaction Content.
        /// </summary>
        /// <param name="HTDTX"> Out Parameter. HTLC Timeout Delivery Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateHTRDTX(out HtlcTimeoutRevocableDelivertyTx HTRDTX, string HtlcPay, string txId = null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Timeout Revocable Delivery Transaction Content.
        /// </summary>
        /// <param name="HTRDTX"> Out Parameter. HTLC Timeout Revocable Delivery Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <param name="txId"> In Parameter. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateHTTX(out HtlcTimoutTx HTTX, string HtlcPay, string txId=null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Timeout Transaction Content.
        /// </summary>
        /// <param name="HTTX"> Out Parameter. HTLC Timeout Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateReceiverHCTX(out HtlcCommitTx HCTX, string HtlcPay, string HashR);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Commitment Transaction Content of Receiver(Payee).
        /// </summary>
        /// <param name="HCTX"> Out Parameter. HTLC Commitment Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <param name="HashR"> In Parameter. HTLC payment Lock. 
        ///                      It wait a key to unlocked this HTLC transaction which is stored by payee.
        /// </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateReceiverRDTX(out HtlcRevocableDeliveryTx HRDTX, string txId = null);
        /// <summary>
        ///  For HTLC Transaction.
        ///  Create the HTLC Revocable Delivery Transaction Content of Receiver(Payee).
        /// </summary>
        /// <param name="HRDTX"> Out Parameter. Revocable Delivery Transaction Content. </param>
        /// <param name="txId"> In Parameter. Transaction ID of HTLC Commitment Transaction 
        ///                     which is generated by calling CreateReceiverHCTX.
        /// </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateSenderHCTX(out HtlcCommitTx HCTX, string HtlcPay, string HashR);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Commitment Transaction Content of Sender(Payer).
        /// </summary>
        /// <param name="HCTX"> Out Parameter. HTLC Commitment Transaction Content. </param>
        /// <param name="HtlcPay"> In Parameter. HTLC payment which is locked until this HTLC is conveted to RSMC. </param>
        /// <param name="HashR"> In Parameter. HTLC payment Lock. 
        ///                      It wait a key to unlocked this HTLC transaction which is stored by payee.
        /// </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateSenderRDTX(out HtlcRevocableDeliveryTx HRDTX, string txId=null);
        /// <summary>
        /// For HTLC Transaction.
        /// Create the HTLC Revocable Delivery Transaction Content of Sender(Payer).
        /// </summary>
        /// <param name="HRDTX"> Out Parameter. Revocable Delivery Transaction Content. </param>
        /// <param name="txId"> In Parameter. Transaction ID of HTLC Commitment Transaction 
        ///                     which is generated by calling CreateSenderHCTX.
        /// </param>
        /// <returns> true if success, other if failure. </returns>

        bool CreateSettle(out TxContents settleTx);
        /// <summary>
        /// For Settle Transaction.
        /// Creat the Settlement Transaction content which is used to close channel quickly by channel peers.
        /// </summary>
        /// <param name="settleTx"> Out Parameter. Settlement Transaction Content. </param>
        /// <returns> true if success, other if failure. </returns>
    }

    public class ChannelTrader
    {
        public string balance;
        public string publicKey;
        public string address;
        public UInt160 scriptHash;

        public ChannelTrader(string pubKey, string balance)
        {
            this.publicKey = pubKey.NeoStrip();
            this.address = this.publicKey?.ToAddress();
            this.scriptHash = this.publicKey?.ToScriptHash();

            this.balance = balance;
        }
    }
}
