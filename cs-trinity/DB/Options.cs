/*
Author: Trinity Core Team

MIT License

Copyright (c) 2018 Trinity

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Neo.IO.Data.LevelDB;

namespace Trinity.DB
{
    /// Options to control the behavior of a database (passed to Open)

    public class Options : LevelDBBase    
    {
        public Options()
        {
            this.Handler = Native.leveldb_options_create();
        }

        /// If true, the database will be created if it is missing.
        public bool CreateIfMissing
        {
            set { Native.leveldb_options_set_create_if_missing(this.Handler, value ? true :false); }
        }

        /// If true, an error is raised if the database already exists.
        public bool ErrorIfExists
        {
            set { Native.leveldb_options_set_error_if_exists(this.Handler, value ? true : false); }
        }

        public bool ParanoidChecks
        {
            set { Native.leveldb_options_set_paranoid_checks(this.Handler, value ? true : false); }
        }



        // Any internal progress/error information generated by the db will
        // be written to info_log if it is non-NULL, or to a file stored
        // in the same directory as the DB contents if info_log is NULL.

        /// <summary>
        /// Amount of data to build up in memory (backed by an unsorted log
        /// on disk) before converting to a sorted on-disk file.
        ///
        /// Larger values increase performance, especially during bulk loads.
        /// Up to two write buffers may be held in memory at the same time,
        /// so you may wish to adjust this parameter to control memory usage.
        /// Also, a larger write buffer will result in a longer recovery time
        /// the next time the database is opened.
        ///
        /// Default: 4MB
        /// </summary>
        public long WriteBufferSize
        {
            set { Native.leveldb_options_set_write_buffer_size(this.Handler, (UIntPtr)value); }
        }

        /// <summary>
        /// Number of open files that can be used by the DB.  You may need to
        /// increase this if your database has a large working set (budget
        /// one open file per 2MB of working set).
        ///
        /// Default: 1000
        /// </summary>
        public int MaxOpenFiles
        {
            set { Native.leveldb_options_set_max_open_files(this.Handler, value); }
        }

        /// <summary>
        /// Control over blocks (user data is stored in a set of blocks, and
        /// a block is the unit of reading from disk).
        ///
        /// If not set, leveldb will automatically create and use an 8MB internal cache.
        /// </summary>
        public Cache Cache
        {
            set
            {
                Native.leveldb_options_set_cache(this.Handler, value.Handler);
                this._Cache = value;
            }
            get { return _Cache; }
        }

        public Comparators Comparator
        {
            set
            {
                Native.leveldb_options_set_comparator(this.Handler, value.Handler);
                this._Comparators = value;
            }
            get { return _Comparators; }
        }

        public long BlockSize
        {
            set { Native.leveldb_options_set_block_size(this.Handler, (UIntPtr)value); }
        }

        public int RestartInterval
        {
            set { Native.leveldb_options_set_block_restart_interval(this.Handler, value); }
        }

        public int CompressionType
        {
            set { Native.leveldb_options_set_compression(this.Handler, (CompressionType)value); }
        }

        protected override void FreeUnDisposedObject()
        {
            if (this.Handler != default(IntPtr))
                Native.leveldb_options_destroy(this.Handler);
        }

        Cache _Cache;
        Comparators _Comparators;

    }
}
